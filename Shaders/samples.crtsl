surface my_constant()
{
	Oi = Os;
	Ci = Os * Cs;
}

surface surfaceNormals()
{
	Oi = Os;
	Ci = Os * (N + 1) * 0.5;
}

surface diffuse_sample()
{
	Oi = Os;
	Ci = Os * Cs * diffuse(N);
}

surface specular_sample(real roughness=0.1;)
{
	#out = surfColor * (diffuse(N) * 0.5 + specular(N, roughness) * 0.5);
	Oi = Os;
	Ci = Os * Cs * (diffuse(N) * 0.5 + 0.5 * specular(N, roughness));
}

surface reflect_sample(real roughness=0.1;)
{
	vec3 Nf = faceforward(N, I);
	vec3 r = reflect(I, Nf);
	Oi = Os;
	Ci = Os * Cs * (diffuse(Nf) + specular(Nf, roughness)) + trace(P, r);
}

surface matte_opa(real Ka = 1;
				real Kd = 1;)
{
	vec3 Nf = faceforward(N, I);
	Oi = Os;
	Ci = Os * Cs * (Kd * diffuse(N));
}

surface smoothstep_sample(real rim_width = 0.8;)
{
	vec3 nf = faceforward(N, I);
	vec3 i = normalize(-I);
	real dot = 1 - nf.i;
	
	Oi = smoothstep(1 - rim_width, 1, dot);
	
	Ci = Oi * Cs;
}
