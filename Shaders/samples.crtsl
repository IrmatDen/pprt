surface my_constant()
{
	Oi = Os;
	Ci = Os * Cs;
}

surface surfaceNormals()
{
	Oi = Os;
	Ci = Os * (N + 1) * 0.5;
}

surface diffuse_sample()
{
	Oi = Os;
	Ci = Os * Cs * diffuse(N);
}

surface specular_sample(real roughness=0.1;)
{
	#out = surfColor * (diffuse(N) * 0.5 + specular(N, roughness) * 0.5);
	Oi = Os;
	Ci = Os * (Cs * diffuse(N) + color(1, 1, 1) * specular(N, roughness));
}

surface reflect_sample(real roughness=0.1;)
{
	vec3 r = reflect(I, N);
	Oi = Os;
	Ci = Os * Cs * (diffuse(N) + specular(N, roughness)) + trace(P, r);
}

surface matte_opa(real Ka = 1;
				real Kd = 1;)
{
	vec3 Nf = faceforward(N, I);
	Oi = Os;
	Ci = Os * Cs * (Kd * diffuse(Nf));
}
